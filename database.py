from sqlalchemy import create_engine, text
import os
from dotenv import load_dotenv

# If running locally, load from .env
if os.environ.get("RUNNING_IN_DOCKER") != "1":
    from dotenv import load_dotenv
    load_dotenv() 

# Load from actual environment variables
db_user = os.environ.get('DB_USER')
db_password = os.environ.get('DB_PASSWORD')
db_host = os.environ.get('DB_HOST')
db_name = os.environ.get('DB_NAME')

# Validate
if not all([db_user, db_password, db_host, db_name]):
    raise RuntimeError("Missing DB credentials in environment.")

if db_user and db_password and db_host and db_name:
    DB_URL = f"postgresql+psycopg2://{db_user}:{db_password}@{db_host}:5432/{db_name}"
else:
    raise RuntimeError("Database credentials are not set in .env. Please set DB_USER, DB_PASSWORD, DB_HOST, DB_NAME.")
engine = create_engine(DB_URL)

# saving the description in the db generated by AI
def save_summary(summary, drive_file_path):
    try:
        query = text("""UPDATE uploaded_files
                    SET description = :description
                    WHERE file_path = :file_path;
                    """)
        params = {
            'description': summary,
            'file_path' :drive_file_path
        }
        with engine.connect() as conn:
            result = conn.execute(query,params)
            conn.commit()
            if result:
                return True
    except Exception as e:
        print(f"[error] while saving the summary : {e}")
        return False

def get_null_notes():
    query = text("SELECT file_path,filename FROM uploaded_files WHERE description = '' ")
    try:
        with engine.connect() as conn:
            result = conn.execute(query).fetchall()
        return result if result else None
    except Exception as e:
        print("[Error] while getting null notes: ",e)
        return None
